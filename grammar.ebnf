program        ::= { proc_decl } ;

proc_decl      ::= "proc" identifier "(" [ param_list ] ")" block ;

param_list     ::= param { "," param } ;
param          ::= type identifier ;

block          ::= "{" { declaration | statement } "}" ;

declaration    ::= type init_decl_list ";" ;
init_decl_list ::= init_decl { "," init_decl } ;
init_decl      ::= identifier [ "=" expression ] ;

statement      ::= block
                 | "if" "(" expression ")" statement [ "else" statement ]
                 | "while" "(" expression ")" statement
                 | expression ";"               # includes assignment & call
                 | "return" ";" ;

expression     ::= assignment ;

assignment     ::= logical_or
                 | identifier "=" assignment ;

logical_or     ::= logical_and { "||" logical_and } ;
logical_and    ::= equality    { "&&" equality    } ;
equality       ::= comparison  { ("==" | "!=") comparison } ;
comparison     ::= term        { ("<"|"<="|">"|">=") term } ;
term           ::= factor      { ("+" | "-") factor } ;
factor         ::= unary       { ("*" | "/" | "%") unary } ;
unary          ::= ("!" | "-" ) unary | primary ;
primary        ::= integer_lit
                 | boolean_lit
                 | identifier
                 | identifier "(" [ arg_list ] ")"   # proc call
                 | "(" expression ")" ;

arg_list       ::= expression { "," expression } ;

type           ::= "int" | "bool" ;
integer_lit    ::= digit+ ;
boolean_lit    ::= "true" | "false" ;
identifier     ::= letter ( letter | digit | "_" )* ;
